/**
 *  This file is part of Uno
 *
 *  Abstract player class which define all required functions of a Uno player.
 *
 *
 */
package Uno.UnoPlayer;

import Uno.Deck;
import Uno.UnoCard.BlackCard;
import Uno.UnoCard.Card;


public abstract class Player {
    /**< Player unique id generated by StartFrameListener class */
    protected int id;

    /**< Index of Player object in arraylist */
    protected int playerIndex;

    /**< Deck object containing all cards in hand */
    protected Deck handCard;

    /**< Player name generated by StartFrameListener class */
    protected String name;

    /**
     * Constructor to set player id and index. Initialize hand card and wait for server to get initial cards.
     * @param id Unique id for this type of player
     * @param index Index of this player in player list in Game class.
     */
    public Player(int id, int index) {
        this.id = id;
        this.playerIndex = index;
        this.handCard = new Deck();
    }

    /**
     * Main function to play one card according to info from server. Use pickCard(), pickColor() and pickOrder()
     * methods to get a valid card and return it to server. Return null if player choose to skip.
     * @param lastCard Last played card object
     * @param addStack number of cards that players need to draw as punishment
     * @return Played card object, null if player choose to skip.
     */
    public Card getPlayedCard(Card lastCard, int addStack) {
        int pickedIndex = pickCard(lastCard,addStack);
        if (pickedIndex == -1) {
            /* choose to skip the turn*/
            return null;
        }
        Card playedCard = handCard.drawCardUseIndex(pickedIndex);
        if (playedCard instanceof BlackCard) {
            pickColor((BlackCard)playedCard);
            pickOrder((BlackCard)playedCard);
        }
        return playedCard;
    }

    /**
     * Abstract functions to pick a card and check validity.
     * @param lastCard Last played card object
     * @param addStack number of cards that players need to draw as punishment
     * @return index of card to played in hand card list
     */
    public abstract int pickCard(Card lastCard, int addStack);

    /**
     * Abstract functions to let players pick a color if they played a black card.
     * @param playedCard black card that need to set a color
     */
    public abstract void pickColor(BlackCard playedCard);

    /**
     * Abstract functions to let players pick an order if they played a black card.
     * @param playedCard black card that need to set an order
     */
    public abstract void pickOrder(BlackCard playedCard);

    /**
     * Functions to add one card to hand. Use in Uno.Game class.
     * @param inCard Card to be added to hand card list.
     */
    public void drawOneCard(Card inCard) {
        handCard.addOneTopCard(inCard);
    }

    /**
     * Functions to check if there is valid card in hand
     * @param lastCard Last played card object
     * @param addStack number of cards that players need to draw as punishment
     * @return if player has legal card this turn
     */
    public boolean hasValidCard(Card lastCard, int addStack) {
        return handCard.containValidCard(lastCard,addStack);
    }

    public Deck getHandCard() {
        return handCard;
    }

    public int getId() {
        return id;
    }

    public int getPlayerIndex() {
        return playerIndex;
    }

    public String getName() {
        return name;
    }

}
